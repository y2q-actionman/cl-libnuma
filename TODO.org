# -*- mode: org; -*-

* not implemented features

- [X] Enable to set a callback for numa_error() and numa_warn().

- [X] checks libc-semantic return values. 

- [ ] License.
  LLGPL?


* enhancement

- [X] Introduce 'bitmask' defclass.
  And more, 'nodemask' or 'cpumask' class?
  Or, List?

- [X] bitmask operations for cl-libnuma:bitmask type?

- [ ] Prints appropriate messages when libnuma headers are not found.

- [X] (numa-move-pages: support nodes-list as a bitvector-type)
  Dropped. I mistaken its argument.

- [X] rewrite smp test with cffi:mem-aref, and boudeaux-threads. 

- [X] supply a library name for overriding syntax definitions.
  (RTLD_NEXT, or a library name, or cffi library name (cffi::get-foreign-library) ..)

- [X] Tests for basic bindings

- [ ] Tests checking whether numa_error() was called or not.

- [X] malloc-pointer type?

- [X] make-numa-bitmask should take a 'T' instead of 'NIL'?

- [X] (rewrite layered calls with foreign-funcall)
  Dropped. cffi:foreign-funcall cannot convert a minus return value to a minus lisp integer..
  See 'cffi bugs' below.

- [X] (Use cffi:foreign-funcall for finding alternative function in define-overriding-callback)
  Dropped. I eliminated facilities for calling a 'next' function.

- [ ] Report a condition when numa_error() is called.
  numa-error -> serious-condition, numa-warn -> warning.

- [ ] Only supply a restart for ~numa-num-possible-cpus~

* additional features

- [X] (Should I make 'getpid' ready?)
  or, check interoperability with excl.osi, etc.
  -- Dropped. We can use 'pid=0' as a pid of the current process.

- [ ] Import errno?
  numa-move-pages returns an array filled with errno.

- [X] checks libnuma version?
  for numa-num-possible-cpus

- [ ] Fix for libnuma: numa-node-to-cpus with -1 causes segfault.


* libnuma manpage bugs

- numa_num_possible_cpus()
  This does not exist at the top of man page, and has no explanations!

- numa_free_cpumask(), numa_free_nodemask()
  The manpage says nothing, but this function takes a pointer to
  struct bitmask! (K&R C style!?)

- numa_get_interleave_node()
  source says this is undocumented

- numa_get_run_node_mask()
  manpage says this returns a CPU mask, but source says it's a node mask!

- numa_node_to_cpus()
  - numa-node-to-cpus with -1 causes segfault.
  - A trivial issue: manpage doesn't highlight numa_allocate_cpumask()
  - If the bitmask is not long enough, libnuma calls numa_error(). This not returns ERANGE said in manpage.

- numa_pagesize()
  source says 'not documented', and don't appear at the top of
  manpage, but description is found!

- numa_distance()
  If arguments are out-of-range, this silently fails and returns an
  undefined value. (which is read from out of the 'distance_table' of
  libnuma.)

- numa_set_membind()
  If an error occured, numa_error() is called.

* cffi bugs
** On Allegro 9.0 64-bit smp, cffi:foreign-funcall cannot treat a minus return value.

#+BEGIN_SRC lisp
  ;; numa_node_size(-1, NULL) returns -1.
  
  ;; using defcfun
  CL-LIBNUMA> (defcfun (%numa-node-size "numa_node_size")
      :long
    (node :int)
    (freep (:pointer :long)))
  
  %NUMA-NODE-SIZE
  CL-LIBNUMA> (%numa-node-size -1 (null-pointer))
  -1
  CL-LIBNUMA> 
  
  ;; using foreign-funcall
  CL-LIBNUMA> (foreign-funcall "numa_node_size" :int -1 :pointer (null-pointer) :long)
  
  18446744073709551615
#+END_SRC

This is caused by 'system::ff-funcall usage.

The code ~foreign-funcall~ generates:
#+BEGIN_EXAMPLE
CL-LIBNUMA> (SYSTEM::FF-FUNCALL (LOAD-TIME-VALUE (EXCL::DETERMINE-FOREIGN-ADDRESS
                                          '("numa_node_size" :LANGUAGE :C)
                                          FOREIGN-FUNCTIONS::EP-FLAG-ALWAYS-RELEASE
                                          NIL))
                        '(:INT (SIGNED-BYTE 32)) -1
                        '(:FOREIGN-ADDRESS) (null-pointer)
                        '(:LONG (SIGNED-BYTE 64)))
18446744073709551615
#+END_EXAMPLE

The code ~defcfun~ and ~ff:def-foreign-call~ of Allegro generates:
#+BEGIN_EXAMPLE
CL-LIBNUMA> (SYSTEM::FF-FUNCALL (LOAD-TIME-VALUE (EXCL::DETERMINE-FOREIGN-ADDRESS
                                          '("numa_node_size" :LANGUAGE :C)
                                          FOREIGN-FUNCTIONS::EP-FLAG-ALWAYS-RELEASE
                                          NIL))
                        '(:INT (SIGNED-BYTE 32)) -1
                        '(:FOREIGN-ADDRESS) (null-pointer)
                        '(:LONG (INTEGER -9223372036854775808 9223372036854775807)))
-1
#+END_EXAMPLE

So, Can I fix this problem with changing from ~(signed-byte 64)~ to
~(integer -9223372036854775808 9223372036854775807)~ ?
